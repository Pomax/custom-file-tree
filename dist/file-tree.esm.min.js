var d=n=>document.createElement(n),y=n=>n.split("/").at(-1).includes("."),h=globalThis.customElements,E=globalThis.HTMLElement??class{},l=class extends E{get removeEmpty(){return this.root.getAttribute("remove-empty")}get name(){return this.getAttribute("name")}set name(t){this.setAttribute("name",t)}get path(){return this.getAttribute("path")}set path(t){this.setAttribute("path",t)}get root(){return this.closest("file-tree")}get parentDir(){return this.closest("dir-entry")}emit(t,i={},e=()=>{}){i.grant=e,this.root.dispatchEvent(new CustomEvent(t,{detail:i}))}find(t){return this.querySelector(t)}findInTree(t){return this.root.querySelector(t)}findAll(t){return Array.from(this.querySelectorAll(t))}findAllInTree(t){return Array.from(this.root.querySelectorAll(t))}};var c=class extends l{init(t,i){this.name=t,this.path=i;let e=this.heading=d("file-heading");e.textContent=t,this.appendChild(e);let r=d("button");r.title="rename file",r.textContent="\u270F\uFE0F",this.appendChild(r),r.addEventListener("click",a=>{a.preventDefault(),a.stopPropagation();let o=prompt("New file name?",this.heading.textContent)?.trim();if(o){if(o.includes("/"))return alert("If you want to relocate a file, just move it.");let g=this.path,C=g.replace(this.heading.textContent,o),x=this.path;this.emit("file:rename",{oldName:g,newName:C},()=>{this.path=x.replace(this.heading.textContent,o),this.name=o,this.heading.textContent=o})}});let s=d("button");s.title="delete file",s.textContent="\u{1F5D1}\uFE0F",this.appendChild(s),s.addEventListener("click",a=>{if(a.preventDefault(),a.stopPropagation(),confirm("are you sure you want to delete this file?")){let o=this.parentDir;this.emit("file:delete",{path:this.path},()=>{o.removeChild(this),this.removeEmpty&&o.checkEmpty()})}}),this.addEventListener("click",()=>{this.emit("file:click",{path:this.path},()=>{this.findAllInTree(".selected").forEach(a=>a.classList.remove("selected")),this.classList.add("selected")})}),this.draggable=!0,this.addEventListener("dragstart",a=>{a.stopPropagation(),this.classList.add("dragging"),this.dataset.id=`${Date.now()}-${Math.random()}`,a.dataTransfer.setData("id",this.dataset.id)})}relocateContent(t,i){this.heading.textContent=this.heading.textContent.replace(t,i),this.path=this.path.replace(t,i)}removeEntry(t){this.path===t&&this.remove()}selectEntry(t){this.classList.toggle("selected",t===this.path)}toJSON(){return JSON.stringify(this.toValue())}toString(){return this.path}toValue(){return[this.toString()]}},p=class extends l{};h.define("file-entry",c);h.define("file-heading",p);var f=class n extends l{init(t,i=t){this.setNameAndPath(t,i),this.addButtons(t,i)}connectedCallback(){this.clickListener=t=>{if(t.stopPropagation(),t.preventDefault(),this.path===".")return;let i=t.target.tagName;if(i!=="DIR-ENTRY"&&i!=="DIR-HEADING")return;let e=this.classList.contains("closed");this.emit("dir:click",{path:this.path,currentState:e?"closed":"open"},()=>this.classList.toggle("closed"))},this.addEventListener("click",this.clickListener),this.removeListener=w(this),this.path==="."&&(this.draggable=!1)}disconnectedCallback(){this.removeListener(),this.removeEventListener("click",this.clickListener)}setNameAndPath(t,i){this.name=t,this.path=i;let e=this.find("dir-heading");(!e||e.parentNode!==this)&&(e=this.heading=d("dir-heading"),this.appendChild(e)),e.textContent=t.replace("/","")}addButtons(t,i){this.addNewEntryButton(t,i),this.addUploadButton(t,i),this.addRenameButton(t,i),this.addDeleteButton(t,i)}addNewEntryButton(t,i){let e=d("button");e.title="add new file",e.textContent="+",e.addEventListener("click",()=>N(this,i)),this.appendChild(e)}addUploadButton(t,i){let e=d("button");e.title="upload files from your device",e.textContent="\u{1F4BB}",e.addEventListener("click",()=>A(this)),this.appendChild(e)}addRenameButton(t,i){if(this.path!=="."){let e=d("button");e.title="rename dir",e.textContent="\u270F\uFE0F",this.appendChild(e),e.addEventListener("click",()=>T(this))}}addDeleteButton(t,i){let e=d("button");e.title="delete dir",e.textContent="\u{1F5D1}\uFE0F",this.appendChild(e),e.addEventListener("click",()=>k(this))}setFiles(t=[]){for(let i of t)this.addEntry(i,i);this.sort()}addEntry(t,i=t){if(!t.includes("/"))return t.includes(".")?this.addFile(t,i):this.addDirectory(t+"/",i+"/");let e=t.substring(0,t.indexOf("/")+1),r=i.substring(0,i.lastIndexOf("/")+1),s=this.find(`& > dir-entry[name="${e}"]`);return s||(s=new n,s.init(e,r),this.appendChild(s)),this.sort(),s.addEntry(t.replace(e,""),i)}addFile(t,i){let e=this.find(`& > file-entry[name="${t}"]`);return e||(e=new c,e.init(t,i),this.appendChild(e),this.sort(!1)),e}addFileFromUpload(t,i){let e=this.path,r=(e!=="."?e:"")+t;this.emit("file:upload",{fileName:r,content:i},()=>{this.addEntry(t,r),this.sort()})}addDirectory(t,i){let e=this.find(`& > dir-entry[name="${t}"]`);return e||(e=new n,e.init(t,i),this.appendChild(e),this.sort(!1)),e}sort(t=!0){let i=[...this.children];i.sort((e,r)=>e.tagName==="DIR-HEADING"?-1:r.tagName==="DIR-HEADING"?1:e.tagName==="BUTTON"?-1:r.tagName==="BUTTON"?1:e.tagName==="DIR-ENTRY"&&r.tagName==="DIR-ENTRY"?(e=e.path,r=r.path,e<r?-1:1):e.tagName==="DIR-ENTRY"?-1:r.tagName==="DIR-ENTRY"?1:(e=e.path,r=r.path,e<r?-1:1)),i.forEach(e=>this.appendChild(e)),t&&this.findAll("& > dir-entry").forEach(e=>e.sort(t))}relocateContent(t,i){for(let e of this.children)e.relocateContent?.(t,i)}removeEntry(t){if(t===this.path)return this.remove();for(let i of this.children)i.removeEntry?.(t)}selectEntry(t){for(let i of this.children)i.selectEntry?.(t)}checkEmpty(){this.removeEmpty&&(this.find("file-entry")||this.emit("dir:delete",{path:this.path},()=>{this.parentNode.removeChild(this)}))}toJSON(){return JSON.stringify(this.toValue())}toString(){return this.toValue().join(",")}toValue(){return[this.findAll("& > dir-entry").map(t=>t.toValue()),this.findAll("& > file-entry").map(t=>t.toValue())].flat(1/0)}},u=class extends l{};h.define("dir-entry",f);h.define("dir-heading",u);function D(n){return new Promise((t,i)=>{let e=new FileReader;e.onloadend=({target:r})=>t(r.result),e.onerror=i,e.readAsArrayBuffer(n)})}function L(n,t){return t===n?!0:t.parentDir===n}function w(n){let t=new AbortController;n.draggable=!0;let i=()=>{n.findAllInTree(".drop-target").forEach(e=>e.classList.remove("drop-target"))};return n.addEventListener("dragstart",e=>{e.stopPropagation(),n.classList.add("dragging"),n.dataset.id=`${Date.now()}-${Math.random()}`,e.dataTransfer.setData("id",n.dataset.id)},{signal:t.signal}),n.addEventListener("dragenter",e=>{e.preventDefault(),i(),n.classList.add("drop-target")},{signal:t.signal}),n.addEventListener("dragover",e=>{let r=e.target;L(n,r)&&(e.preventDefault(),i(),n.classList.add("drop-target"))},{signal:t.signal}),n.addEventListener("dragleave",e=>{e.preventDefault(),i()},{signal:t.signal}),n.addEventListener("drop",async e=>{e.preventDefault(),e.stopPropagation(),i();let r=e.dataTransfer.getData("id");if(r)return I(n,r);await v(n,e.dataTransfer.items)},{signal:t.signal}),()=>t.abort()}function N(n,t){let i=prompt("Please specify a filename.")?.trim();if(i){if(i.includes("/"))return alert("Just add new files directly to the directory where they should live.");let e=i;if(t!=="."&&(i=t+i),n.findInTree(`[path="${i}"]`))return;i.includes(".")?n.emit("file:create",{fileName:i},()=>n.addEntry(e,i)):confirm(`Did you mean to create a new directory ${i}?`)&&n.emit("dir:create",{dirName:i},()=>{n.addDirectory(e+"/",i+"/")})}}function A(n){let t=d("input");t.type="file",t.multiple=!0,confirm('To upload one or more files, press "OK". To upload an entire folder, press "Cancel".')||(t.webkitdirectory=!0),t.addEventListener("change",()=>{let{files:e}=t;e&&v(n,e)}),t.click()}async function v(n,t){async function i(e,r=""){if(e instanceof File){let s=await D(e),a=r+(e.webkitRelativePath||e.name);n.addFileFromUpload(a,s)}else if(e.isFile)e.file(async s=>{let a=await D(s),o=r+s.name;n.addFileFromUpload(o,a)});else if(e.isDirectory){let s=r+e.name+"/";e.createReader().readEntries(async a=>{for(let o of a)await i(o,s)})}}for await(let e of t)try{await i(e instanceof File?e:e.webkitGetAsEntry())}catch{return alert(`Unfortunately, a ${e.kind} is not a file or folder.`)}}function T(n){let t=prompt("Choose a new directory name",n.heading.textContent)?.trim();if(t){if(t.includes("/"))return alert("If you want to relocate a dir, just move it.");let i=n.heading.textContent,e=n.path,r=e.replace(i,t);n.findInTree(`dir-entry[path="${r}"]`)&&confirm("That directory already exists. Move all the content?")&&n.emit("dir:rename",{oldPath:e,newPath:r},()=>{let a=n.path;return n.heading.textContent=t,n.name=t,n.path=r,n.relocateContent(a,r),{oldPath:a,newPath:r}})}}function k(n){confirm("Are you *sure* you want to delete this directory and everything in it?")&&n.emit("dir:delete",{path:n.path},()=>{n.remove()})}function I(n,t){let i=n.findInTree(`[data-id="${t}"]`);if(delete i.dataset.id,i.classList.remove("dragging"),i===n)return;let e=i.path,r=n.path;if(i instanceof c){let s=(r!=="."?r:"")+e.substring(e.lastIndexOf("/")+1);if(e!==s){let a=n.root.relocateEntry(e,s);a&&n.emit("file:move",{oldPath:e,newPath:s},a)}}if(i instanceof f){let s=(r!=="."?r:"")+i.heading.textContent+"/";if(e!==s){let a=n.root.relocateEntry(e,s);a&&n.emit("dir:move",{oldPath:e,newPath:s},a)}}}var m=class extends l{get root(){return this}get parentDir(){return this.rootDir}setFiles(t=[]){let i=this.querySelector('dir-tree[path="."]');i||(i=this.rootDir=new f,i.init("."),this.appendChild(i)),i.setFiles(t)}addEntry(t){return this.find(`[path="${t}"]`)?alert(`${t} already exists. Overwrite?`):this.rootDir.addEntry(t)}relocateEntry(t,i){return this.find(`[path="${i}"]`)?alert(`${i} already exists.`):y(t)?this.relocateFile(t,i):this.relocateDir(t,i)}relocateFile(t,i){return()=>{let e=this.rootDir.addEntry(i),r=this.find(`[path="${t}"]`);e.setAttribute("class",r.getAttribute("class")),this.removeEntry(t)}}relocateDir(t,i){let e=this.find(`[path="${t}"]`,this.rootDir);return()=>{e.toValue().forEach(s=>{let a=s.replace(t,i);this.rootDir.addEntry(a),this.removeEntry(s)}),this.removeEntry(t),this.rootDir.sort()}}removeEntry(t){this.rootDir.removeEntry(t)}selectEntry(t){this.rootDir.selectEntry(t)}sort(){this.rootDir.sort()}toJSON(){return this.rootDir.toJSON()}toString(){return this.rootDir.toString()}toValue(){return this.toString()}};h.define("file-tree",m);
